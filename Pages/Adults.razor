@page "/Adult"
@using DnpAssignments.Data
@using DnpAssignments.Models
@inject IAdult AdultService;

<h3>Adults</h3>
<p>Search by First Name:<input type="text" @oninput="@((arg) => Filter(arg))" 
                               style="width: 200px"/>
</p>

@if (adultsToShow == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!adultsToShow.Any())
{
    <p>
        <em>No Adults registred!</em>
    </p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">Id</th>
                <th scope="col">First Name</th>
                <th scope="col">Last Name</th>
                <th scope="col">Hair Color</th>
                <th scope="col">Age</th>
                <th scope="col">Weight</th>
                <th scope="col">Height</th>
                <th scope="col">Sex</th>
                <th scope="col">Job Title</th>
                <th scope="col">Salary</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var adult in adultsToShow)
        {
            <tr>
                <td>@adult.Id</td>
                <td>@adult.FirstName</td>
                <td>@adult.LastName</td>
                <td>@adult.HairColor</td>
                <td>@adult.Age</td>
                <td>@adult.Weight</td>
                <td>@adult.Height</td>
                <td>@adult.Sex</td>
                <td>@adult.JobTitle.JobTitle</td>
                <td>@adult.JobTitle.Salary</td>
                
                <AuthorizeView Policy="MustBeManager">
                    <td>
                        <button @onclick="@(() => RemoveAdultAsync(adult.Id))">
                            <i class="oi oi-trash" style="color: red"/>
                        </button>
                    </td>
                    <td>
                        <button @onclick="() => EditAdultAsync(adult.Id)">
                            <i class="oi oi-pencil" style="color: #2efff8"></i>
                        </button>
                    </td>
                </AuthorizeView>
                
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private IList<Adult> adultsToShow;
    private IList<Adult> adults;
    private string filterByName;

    protected override async Task OnInitializedAsync()
    {
        adults = await AdultService.GetAllAdultsAsync();
        adultsToShow = adults;
    }

    private void Filter(ChangeEventArgs changeEventArgs)
    {
        filterByName = null;
        try
        {
            filterByName = changeEventArgs.Value.ToString();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
        ExecuteFilter();
    }

    private void ExecuteFilter()
    {
        adultsToShow = adults.Where(a => a.FirstName.Equals(filterByName)).ToList();
    }

    private async Task RemoveAdultAsync(int adultId)
    {
        Adult adultToRemove = adults.First(a => a.Id == adultId);
        await AdultService.RemoveAdultAsync(adultId);
        adultsToShow.Remove(adultToRemove);
        adults.Remove(adultToRemove);
    }
}